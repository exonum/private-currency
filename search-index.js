var N = null;var searchIndex = {};
searchIndex["private_currency"]={"doc":"Privacy-focused Exonum service. The service hides the amounts being transferred among registered accounts (but not the identities of transacting accounts).","items":[[3,"Debugger","private_currency","Debugger provides ability to connect to the service and retrieve information useful for debugging.",N,N],[3,"DebuggerOptions","","Debugger options.",N,N],[12,"check_invariants","","Check service invariants on `after_commit`.",0,N],[3,"EncryptedData","","Encrypted information embedded into transfers.",N,N],[3,"SecretState","","Secret state of an account owner.",N,N],[3,"VerifiedTransfer","","Information about an incoming transfer successfully verified w.r.t. the `SecretState` of the receiver’s wallet.",N,N],[12,"opening","","Opening for the transferred amount.",1,N],[12,"accept","","`Accept` transaction for the transfer.",1,N],[3,"Config","","Service configuration.",N,N],[12,"initial_balance","","Initial amount of tokens for a new account.",2,N],[12,"rollback_delay_bounds","","Acceptable bounds on the `Transfer::rollback_delay()` parameter.",2,N],[12,"min_transfer_amount","","Minimum acceptable transfer amount.",2,N],[3,"Service","","Privacy-preserving cryptocurrency service.",N,N],[4,"DebugEvent","","Event sent to the debugger.",N,N],[13,"RolledBack","","A transfer has been rolled back.",3,N],[12,"transfer","private_currency::DebugEvent","Transfer that has been rolled back.",3,N],[12,"height","","Height at which the rollback occurred.",3,N],[0,"api","private_currency","HTTP API for the service.",N,N],[3,"TrustAnchor","private_currency::api","Trust anchor for block verification.",N,N],[3,"WalletQuery","","Query for the `wallet` endpoint.",N,N],[12,"key","","Public key of the account to check.",4,N],[12,"start_history_at","","The starting index for the user’s list of events.",4,N],[3,"WalletProof","","Cryptographically authenticated proof of the state for a single wallet.",N,N],[3,"CheckedWalletProof","","Information about wallet state useful for a client, obtained after checking a `WalletProof`.",N,N],[12,"block","","Block information.",5,N],[12,"wallet","","General information about the wallet.",5,N],[12,"history","","New events concerning the wallet. The event with index `0` corresponds to an event at index `query.start_history_at` in the wallet history, and so on.",5,N],[12,"unaccepted_transfers","","Unaccepted incoming transfers for the wallet.",5,N],[4,"BlockVerifyError","","Error occuring during block header verification.",N,N],[13,"InvalidValidatorId","","Invalid validator ID encountered in `BlockProof`.",6,N],[13,"DuplicateValidators","","Duplicate `Precommit`s authored by the same validator.",6,N],[13,"NoQuorum","","No sufficient validator quorum.",6,N],[13,"InvalidSignature","","Invalid validator signature.",6,N],[4,"Api","","HTTP API for the private cryptocurrency service.",N,N],[4,"FullEvent","","Event changing balance of a wallet.",N,N],[13,"CreateWallet","","Event corresponding to wallet creation. There is only one such event in wallet history - the very first one.",7,N],[13,"Transfer","","Transfer to or from the wallet.",7,N],[13,"Rollback","","Rolled-back transfer returning the funds to the sender.",7,N],[4,"VerifyError","","Error during `WalletProof` verification.",N,N],[13,"Block","","Error verifying block header.",8,N],[13,"MapProof","","Error verifying one of `MapProof`s included into the wallet proof.",8,N],[12,"error","private_currency::api::VerifyError","Cause of the verification failure.",8,N],[12,"proof_description","","Description of the proof where an error has occurred.",8,N],[13,"ListProof","private_currency::api","Error verifying one of `ListProof`s included into the wallet proof.",8,N],[12,"error","private_currency::api::VerifyError","Cause of the verification failure.",8,N],[12,"proof_description","","Description of the proof where an error has occurred.",8,N],[13,"ProofDisconnect","private_currency::api","A `ListProof` or `MapProof` is disconnected from its parent. In other words, the root hash of the index restored from the proof does not match one obtained from other proof data.",8,N],[13,"MissingKey","","A `ListProof` or `MapProof` does not prove presence or absence of a key, which it is expected to prove.",8,N],[13,"KeyMismatch","","A Merkle proof proves existence of keys that do not match the plain data included into to the proof.",8,N],[13,"NoContents","","The proof shows existence of the requested wallet, but the events and unaccepted transfers are missing from the proof.",8,N],[4,"ProofDescription","","Description of a part of a `WalletProof`.",N,N],[13,"WalletsTable","","`MapProof` from the `state_hash` mentioned in the block header, to the wallets table.",9,N],[13,"Wallet","","`MapProof` from the wallets table to a specific wallet.",9,N],[13,"History","","`ListProof` for wallet history.",9,N],[13,"UnacceptedTransfers","","`MapProof` for unaccepted transfers.",9,N],[11,"check","","Checks the proof, returning information contained in the proof that might be interesting to client applications.",10,[[["self"],["trustanchor"],["walletquery"]],["result",["checkedwalletproof","verifyerror"]]]],[11,"wallet","","Returns information about a single wallet. The information is supported with cryptographic proofs, allowing client applications to minimize trust in their server peers.",11,[[["serviceapistate"],["walletquery"]],["result",["walletproof"]]]],[11,"transaction","","Accepts transactions for processing.",11,[[["serviceapistate"],["cryptotransactions"]],["result",["hash"]]]],[0,"crypto","private_currency","Cryptographic primitives used in the service.",N,N],[3,"Commitment","private_currency::crypto","Pedersen commitment to an integer value.",N,N],[3,"Opening","","Opening for a Pedersen commitment.",N,N],[12,"value","","Committed value.",12,N],[3,"SimpleRangeProof","","Range proof for a single value in the range `[0; 1 << 64)`.",N,N],[0,"enc","","Reexports from the `box` module (i.e., public-key encryption with Curve25519 keys) in the `sodiumoxide` crate.",N,N],[3,"PublicKey","private_currency::crypto::enc","`PublicKey` for asymmetric authenticated encryption",N,N],[12,"0","","",13,N],[3,"SecretKey","","`SecretKey` for asymmetric authenticated encryption",N,N],[12,"0","","",14,N],[11,"new","private_currency::crypto","Creates a commitment with a randomly chosen blinding.",15,N],[11,"from_opening","","Creates a commitment from the given opening.",15,[[["opening"]],["self"]]],[11,"with_no_blinding","","Creates a commitment with no blinding factor.",15,[[["u64"]],["self"]]],[11,"from_slice","","Attempts to deserialize a commitment from byte slice.",15,N],[11,"to_bytes","","Serializes this commitment to bytes.",15,[[["self"]],["vec",["u8"]]]],[11,"verify","","Verifies if this commitment corresponds to the provided opening.",15,[[["self"],["opening"]],["bool"]]],[11,"from_slice","","Attempts to deserialize an opening from a slice.",12,N],[11,"to_bytes","","Serializes this opening to bytes.",12,[[["self"]],["vec",["u8"]]]],[18,"BITS","","Number of variable bits in the committed value: `64`. The range to which the value must belong is `[0, 1 << BITS)`.",16,N],[11,"prove","","Creates a proof for the specified value (which is provided together with the blinding factor as an `Opening`).",16,[[["opening"]],["option"]]],[11,"from_slice","","Attempts to deserialize this proof from a byte slice.",16,N],[11,"verify","","Verifies this proof with respect to the given committed value.",16,[[["self"],["commitment"]],["bool"]]],[11,"to_bytes","","Serializes this proof into bytes.",16,[[["self"]],["vec",["u8"]]]],[11,"new","private_currency","Creates a new instance with given parameters.",17,N],[11,"nonce","","Cryptographic nonce for the `box` routine from `libsodium`.",17,N],[11,"encrypted_data","","Data encrypted with the `box` routine from `libsodium`.",17,N],[11,"value","","Gets the transferred amount in plaintext.",1,[[["self"]],["u64"]]],[11,"with_random_keypair","","Creates an uninitialized state. The keypair for cryptographic operations is generated randomly.",18,[[],["self"]]],[11,"from_keypair","","Creates an uninitialized state from the specified Ed25519 keypair.",18,[[["publickey"],["secretkey"]],["self"]]],[11,"public_key","","Gets the public key of the wallet (aka verifying Ed25519 key for digital signatures).",18,[[["self"]],["publickey"]]],[11,"balance","","Gets the current wallet balance.",18,[[["self"]],["u64"]]],[11,"create_wallet","","Produces a `CreateWallet` transaction for this wallet.",18,[[["self"]],["createwallet"]]],[11,"create_transfer","","Produces a `Transfer` transaction from this wallet to the specified receiver.",18,[[["self"],["u64"],["publickey"],["u32"]],["transfer"]]],[11,"initialize","","Initializes the state.",18,[[["self"]]]],[11,"verify_transfer","","Verifies an incoming transfer.",18,[[["self"],["transfer"]],["option",["verifiedtransfer"]]]],[11,"transfer","","Updates the state according to a `Transfer` transaction.",18,[[["self"],["transfer"]]]],[11,"rollback","","Rolls back a previously committed transfer.",18,[[["self"],["transfer"]]]],[11,"corresponds_to","","Checks if this state corresponds to the supplied public info about a `Wallet`.",18,[[["self"],["walletinfo"]],["bool"]]],[11,"to_public","","Produces a public info about the state.",18,[[["self"]],["walletinfo"]]],[0,"storage","","Storage logic for the service.",N,N],[3,"Wallet","private_currency::storage","Wallet summary.",N,N],[3,"Event","","Storage representation of an event concerning a wallet.",N,N],[3,"WalletInfo","","Gist of information about the wallet, stripped of auxiliary data.",N,N],[12,"public_key","","Ed25519 public key associated with the wallet. Transactions originating from the wallet need to be digitally signed with the paired secret key.",19,N],[12,"balance","","Commitment to the current wallet balance.",19,N],[3,"Schema","","Schema for the private currency service.",N,N],[11,"new","","Creates a new instance with given parameters.",20,[[["publickey"],["commitment"],["u64"],["u64"],["hash"],["hash"]],["wallet"]]],[11,"public_key","","Ed25519 public key associated with the wallet. Transactions originating from the wallet need to be digitally signed with the paired secret key.",20,[[["self"]],["publickey"]]],[11,"balance","","Commitment to the current wallet balance.",20,[[["self"]],["commitment"]]],[11,"history_len","","Number of entries in the wallet history.",20,[[["self"]],["u64"]]],[11,"last_send_index","","Index of the last outgoing transfer in the wallet history.",20,[[["self"]],["u64"]]],[11,"history_hash","","Merkle root of the wallet history list.",20,[[["self"]],["hash"]]],[11,"unaccepted_transfers_hash","","Merkle root of the unaccepted incoming transfers.",20,[[["self"]],["hash"]]],[11,"new","","Creates a new instance with given parameters.",21,[[["u8"],["hash"]],["event"]]],[11,"tag","","Event tag.",21,[[["self"]],["u8"]]],[11,"transaction_hash","","Hash of a transaction associated with the event.",21,[[["self"]],["hash"]]],[11,"transfer","","Creates a new transfer event.",21,[[["hash"]],["self"]]],[11,"create_wallet","","Creates a new wallet initialization event.",21,[[["hash"]],["self"]]],[11,"rollback","","Creates a new transfer rollback event.",21,[[["hash"]],["self"]]],[11,"encryption_key","","Computes the encryption key associated with the wallet.",19,[[["self"]],["publickey"]]],[11,"info","","Retrieves the wallet summary.",20,[[["self"]],["walletinfo"]]],[11,"encryption_key","","Computes the encryption key associated with the wallet.",20,[[["self"]],["publickey"]]],[11,"new","","Creates a schema based on the storage view.",22,[[["t"]],["self"]]],[11,"state_hash","","Returns the state hash of the service.",22,[[["self"]],["vec",["hash"]]]],[11,"wallets","","Returns the mapping of public keys to wallets.",22,[[["self"]],["proofmapindex",["publickey","wallet"]]]],[11,"wallet","","Loads a wallet with the specified `public_key`.",22,[[["self"],["publickey"]],["option",["wallet"]]]],[11,"unaccepted_transfers","","Returns all unaccepted incoming transfers for the account associated with the given public `key`.",22,[[["self"],["publickey"]],["hashset",["hash"]]]],[11,"history","","Returns all history entries for the specified account.",22,[[["self"],["publickey"]],["vec",["event"]]]],[11,"past_balance","","Returns a past balance of a wallet.",22,[[["self"],["publickey"],["u64"]],["option",["commitment"]]]],[0,"transactions","private_currency","Transaction logic of the service.",N,N],[3,"CreateWallet","private_currency::transactions","Transaction for creating a new wallet.",N,N],[3,"Transfer","","Transfer from one wallet to another wallet.",N,N],[3,"Accept","","Transaction to accept an incoming transfer.",N,N],[4,"CryptoTransactions","","Transactions accepted by the service.",N,N],[13,"CreateWallet","","",23,N],[13,"Transfer","","",23,N],[13,"Accept","","",23,N],[4,"Error","","Errors that can occur during transaction processing.",N,N],[13,"WalletExists","","Wallet already exists.",24,N],[13,"UnregisteredSender","","The sender of a transfer is not registered.",24,N],[13,"UnregisteredReceiver","","The receiver of a transfer is not registered.",24,N],[13,"IncorrectProof","","The range proof for the sender’s sufficient account balance is incorrect.",24,N],[13,"OutdatedHistory","","There has been another outgoing transfer since the referenced point in time.",24,N],[13,"InvalidHistoryRef","","Transfer refers to wallet history length exceeding real one.",24,N],[13,"UnknownTransfer","","An `Accept` transaction references an unknown transfer.",24,N],[13,"UnauthorizedAccept","","The author of an `Accept` transaction differs from the receiver of the referenced transfer.",24,N],[11,"new","","Creates message and signs it.",25,[[["publickey"],["secretkey"]],["createwallet"]]],[11,"new_with_signature","","Creates message and appends existing signature.",25,[[["publickey"],["signature"]],["createwallet"]]],[11,"to_hex","","Returns the hex representation of the binary data. Lower case letters are used (e.g. f9b4ca).",25,[[["self"]],["string"]]],[11,"key","","Ed25519 key for the wallet.",25,[[["self"]],["publickey"]]],[11,"new","","Creates message and signs it.",26,[[["publickey"],["publickey"],["u32"],["u64"],["commitment"],["simplerangeproof"],["simplerangeproof"],["encrypteddata"],["secretkey"]],["transfer"]]],[11,"new_with_signature","","Creates message and appends existing signature.",26,[[["publickey"],["publickey"],["u32"],["u64"],["commitment"],["simplerangeproof"],["simplerangeproof"],["encrypteddata"],["signature"]],["transfer"]]],[11,"to_hex","","Returns the hex representation of the binary data. Lower case letters are used (e.g. f9b4ca).",26,[[["self"]],["string"]]],[11,"from","","Ed25519 public key of the sender. The transaction must be signed with the corresponding secret key.",26,[[["self"]],["publickey"]]],[11,"to","","Ed25519 public key of the receiver.",26,[[["self"]],["publickey"]]],[11,"rollback_delay","","Relative delay (measured in block height) to wait for transfer acceptance from the receiver. The delay is counted from the height of a block containing this `Transfer`.",26,[[["self"]],["u32"]]],[11,"history_len","","Length of the wallet history as perceived by the wallet sender.",26,[[["self"]],["u64"]]],[11,"amount","","Commitment to the transferred amount.",26,[[["self"]],["commitment"]]],[11,"amount_proof","","Proof that `amount` is positive.",26,[[["self"]],["simplerangeproof"]]],[11,"sufficient_balance_proof","","Proof that the sender’s balance is sufficient relative to `amount`.",26,[[["self"]],["simplerangeproof"]]],[11,"encrypted_data","","Encryption of the opening for `amount`.",26,[[["self"]],["encrypteddata"]]],[11,"new","","Creates message and signs it.",27,[[["publickey"],["hash"],["secretkey"]],["accept"]]],[11,"new_with_signature","","Creates message and appends existing signature.",27,[[["publickey"],["hash"],["signature"]],["accept"]]],[11,"to_hex","","Returns the hex representation of the binary data. Lower case letters are used (e.g. f9b4ca).",27,[[["self"]],["string"]]],[11,"receiver","","Public key of the receiver of the transfer.",27,[[["self"]],["publickey"]]],[11,"transfer_id","","Hash of the transfer transaction.",27,[[["self"]],["hash"]]],[11,"new","private_currency::api","Creates a trust anchor based on provided consensus keys of all validators in the blockchain network.",28,[[["i"]],["self"]]],[11,"verify_block_proof","","Verifies a `BlockProof` w.r.t. this trust anchor.",28,[[["self"],["blockproof"]],["result",["blockverifyerror"]]]],[17,"SERVICE_NAME","private_currency","Human-readable service name.",N,N],[17,"SERVICE_ID","","Service identifier.",N,N],[17,"CONFIG","","Service configuration.",N,N],[11,"debug","","Creates a service with an attached debugger.",29,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clear","","",0,N],[11,"initialize","","",0,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"field_size","","",17,[[],["u32"]]],[11,"read","","",17,N],[11,"write","","",17,N],[11,"check","","",17,N],[11,"hash","","",17,[[["self"]],["hash"]]],[11,"hash","","",17,[[["self"]],["hash"]]],[11,"serialize_content","","",17,[[["self"],["s"]],["result"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"equivalent","","",2,[[["self"],["k"]],["bool"]]],[11,"serialize_content","","",2,[[["self"],["s"]],["result"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"clear","","",29,N],[11,"initialize","","",29,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","private_currency::api","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"serialize_content","","",4,[[["self"],["s"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"serialize_content","","",10,[[["self"],["s"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"as_fail","","",6,[[["self"]],["fail"]]],[11,"equivalent","","",6,[[["self"],["k"]],["bool"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"serialize_content","","",7,[[["self"],["s"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"as_fail","","",8,[[["self"]],["fail"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"equivalent","","",9,[[["self"],["k"]],["bool"]]],[11,"from","private_currency::crypto","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"field_size","","",15,[[],["u32"]]],[11,"read","","",15,N],[11,"write","","",15,N],[11,"check","","",15,N],[11,"hash","","",15,[[["self"]],["hash"]]],[11,"hash","","",15,[[["self"]],["hash"]]],[11,"equivalent","","",15,[[["self"],["k"]],["bool"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"equivalent","","",12,[[["self"],["k"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"field_size","","",16,[[],["u32"]]],[11,"read","","",16,N],[11,"write","","",16,N],[11,"check","","",16,N],[11,"from","private_currency::crypto::enc","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"write_hex","","",13,[[["self"],["w"]],["result",["error"]]]],[11,"write_hex_upper","","",13,[[["self"],["w"]],["result",["error"]]]],[11,"equivalent","","",13,[[["self"],["k"]],["bool"]]],[11,"serialize_content","","",13,[[["self"],["s"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"equivalent","","",14,[[["self"],["k"]],["bool"]]],[11,"serialize_content","","",14,[[["self"],["s"]],["result"]]],[11,"from","private_currency::storage","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"field_size","","",20,[[],["u32"]]],[11,"read","","",20,N],[11,"write","","",20,N],[11,"check","","",20,N],[11,"hash","","",20,[[["self"]],["hash"]]],[11,"hash","","",20,[[["self"]],["hash"]]],[11,"serialize_content","","",20,[[["self"],["s"]],["result"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"field_size","","",21,[[],["u32"]]],[11,"read","","",21,N],[11,"write","","",21,N],[11,"check","","",21,N],[11,"hash","","",21,[[["self"]],["hash"]]],[11,"hash","","",21,[[["self"]],["hash"]]],[11,"equivalent","","",21,[[["self"],["k"]],["bool"]]],[11,"serialize_content","","",21,[[["self"],["s"]],["result"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"equivalent","","",19,[[["self"],["k"]],["bool"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","private_currency::transactions","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"field_size","","",25,[[],["u32"]]],[11,"read","","",25,N],[11,"write","","",25,N],[11,"check","","",25,N],[11,"hash","","",25,[[["self"]],["hash"]]],[11,"hash","","",25,[[["self"]],["hash"]]],[11,"serialize_content","","",25,[[["self"],["s"]],["result"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"field_size","","",26,[[],["u32"]]],[11,"read","","",26,N],[11,"write","","",26,N],[11,"check","","",26,N],[11,"hash","","",26,[[["self"]],["hash"]]],[11,"hash","","",26,[[["self"]],["hash"]]],[11,"serialize_content","","",26,[[["self"],["s"]],["result"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"field_size","","",27,[[],["u32"]]],[11,"read","","",27,N],[11,"write","","",27,N],[11,"check","","",27,N],[11,"hash","","",27,[[["self"]],["hash"]]],[11,"hash","","",27,[[["self"]],["hash"]]],[11,"serialize_content","","",27,[[["self"],["s"]],["result"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"serialize_content","","",23,[[["self"],["s"]],["result"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"as_fail","","",24,[[["self"]],["fail"]]],[11,"equivalent","","",24,[[["self"],["k"]],["bool"]]],[11,"cmp","private_currency::crypto::enc","",13,[[["self"],["publickey"]],["ordering"]]],[11,"drop","","",14,N],[11,"deserialize","","",13,[[["d"]],["result",["publickey"]]]],[11,"deserialize","","",14,[[["d"]],["result",["secretkey"]]]],[11,"serialize","","",14,[[["self"],["s"]],["result"]]],[11,"serialize","","",13,[[["self"],["s"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",13,N],[11,"index","","",14,N],[11,"index","","",13,N],[11,"index","","",13,N],[11,"index","","",13,N],[11,"index","","",14,N],[11,"index","","",14,N],[11,"index","","",14,N],[11,"index","","",13,N],[11,"eq","","",14,[[["self"],["secretkey"]],["bool"]]],[11,"eq","","",13,[[["self"],["publickey"]],["bool"]]],[11,"clone","","",14,[[["self"]],["secretkey"]]],[11,"clone","","",13,[[["self"]],["publickey"]]],[11,"partial_cmp","","",13,[[["self"],["publickey"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["publickey"]],["bool"]]],[11,"le","","",13,[[["self"],["publickey"]],["bool"]]],[11,"ge","","",13,[[["self"],["publickey"]],["bool"]]],[11,"gt","","",13,[[["self"],["publickey"]],["bool"]]],[11,"as_ref","","",13,N],[11,"clone","private_currency::api","",4,[[["self"]],["walletquery"]]],[11,"clone","","",7,[[["self"]],["fullevent"]]],[11,"clone","","",9,[[["self"]],["proofdescription"]]],[11,"clone","private_currency::crypto","",15,[[["self"]],["commitment"]]],[11,"clone","","",12,[[["self"]],["opening"]]],[11,"clone","","",16,[[["self"]],["simplerangeproof"]]],[11,"clone","private_currency","",3,[[["self"]],["debugevent"]]],[11,"clone","","",0,[[["self"]],["debuggeroptions"]]],[11,"clone","","",17,[[["self"]],["encrypteddata"]]],[11,"clone","private_currency::storage","",20,[[["self"]],["wallet"]]],[11,"clone","","",21,[[["self"]],["event"]]],[11,"clone","","",19,[[["self"]],["walletinfo"]]],[11,"clone","private_currency::transactions","",25,[[["self"]],["createwallet"]]],[11,"clone","","",26,[[["self"]],["transfer"]]],[11,"clone","","",27,[[["self"]],["accept"]]],[11,"clone","","",23,[[["self"]],["cryptotransactions"]]],[11,"clone","","",24,[[["self"]],["error"]]],[11,"clone","private_currency::api","",28,[[["self"]],["trustanchor"]]],[11,"clone","","",6,[[["self"]],["blockverifyerror"]]],[11,"clone","private_currency","",2,[[["self"]],["config"]]],[11,"from","private_currency::api","",8,[[["blockverifyerror"]],["self"]]],[11,"into","private_currency::transactions","",23,[[["self"]],["box",["transaction"]]]],[11,"next","private_currency","",30,[[["self"]],["option",["debugevent"]]]],[11,"as_ref","private_currency::transactions","",25,[[["self"]],["rawmessage"]]],[11,"as_ref","","",26,[[["self"]],["rawmessage"]]],[11,"as_ref","","",27,[[["self"]],["rawmessage"]]],[11,"default","private_currency","",0,[[],["debuggeroptions"]]],[11,"default","","",29,[[],["service"]]],[11,"eq","private_currency::api","",7,[[["self"],["fullevent"]],["bool"]]],[11,"ne","","",7,[[["self"],["fullevent"]],["bool"]]],[11,"eq","","",9,[[["self"],["proofdescription"]],["bool"]]],[11,"eq","private_currency::crypto","",15,[[["self"],["commitment"]],["bool"]]],[11,"ne","","",15,[[["self"],["commitment"]],["bool"]]],[11,"eq","","",12,[[["self"],["opening"]],["bool"]]],[11,"ne","","",12,[[["self"],["opening"]],["bool"]]],[11,"eq","private_currency","",3,[[["self"],["debugevent"]],["bool"]]],[11,"ne","","",3,[[["self"],["debugevent"]],["bool"]]],[11,"eq","","",17,[[["self"],["encrypteddata"]],["bool"]]],[11,"ne","","",17,[[["self"],["encrypteddata"]],["bool"]]],[11,"eq","private_currency::storage","",20,[[["self"],["wallet"]],["bool"]]],[11,"ne","","",20,[[["self"],["wallet"]],["bool"]]],[11,"eq","","",21,[[["self"],["event"]],["bool"]]],[11,"ne","","",21,[[["self"],["event"]],["bool"]]],[11,"eq","","",19,[[["self"],["walletinfo"]],["bool"]]],[11,"ne","","",19,[[["self"],["walletinfo"]],["bool"]]],[11,"eq","private_currency::transactions","",25,[[["self"],["createwallet"]],["bool"]]],[11,"ne","","",25,[[["self"],["createwallet"]],["bool"]]],[11,"eq","","",26,[[["self"],["transfer"]],["bool"]]],[11,"ne","","",26,[[["self"],["transfer"]],["bool"]]],[11,"eq","","",27,[[["self"],["accept"]],["bool"]]],[11,"ne","","",27,[[["self"],["accept"]],["bool"]]],[11,"eq","","",24,[[["self"],["error"]],["bool"]]],[11,"eq","private_currency::api","",6,[[["self"],["blockverifyerror"]],["bool"]]],[11,"eq","private_currency","",2,[[["self"],["config"]],["bool"]]],[11,"ne","","",2,[[["self"],["config"]],["bool"]]],[11,"fmt","private_currency::api","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::transactions","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::api","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::crypto","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::storage","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::transactions","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency::api","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","private_currency","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"sub","private_currency::crypto","",15,[[["self"],["self"]],["commitment"]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"hash","private_currency::api","",9,N],[11,"hash","private_currency::storage","",21,N],[11,"hash","private_currency::transactions","",24,N],[11,"hash","private_currency::api","",6,N],[11,"hash","private_currency","",2,N],[11,"add","private_currency::crypto","",15,[[["self"],["self"]],["commitment"]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub_assign","","",15,[[["self"],["self"]]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"deserialize_field","","",15,[[["value"],["b"],["u32"],["u32"]],["result",["box"]]]],[11,"serialize_field","","",15,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","","",16,[[["value"],["b"],["u32"],["u32"]],["result",["box"]]]],[11,"serialize_field","","",16,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","private_currency","",17,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",17,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","private_currency::storage","",20,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",20,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","","",21,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",21,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","private_currency::transactions","",25,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",25,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","","",26,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",26,[[["self"]],["result",["value","box"]]]],[11,"deserialize_field","","",27,[[["value"],["b"],["offset"],["offset"]],["result",["box"]]]],[11,"serialize_field","","",27,[[["self"]],["result",["value","box"]]]],[11,"deserialize","private_currency","",17,[[["value"]],["result",["box"]]]],[11,"deserialize","private_currency::storage","",20,[[["value"]],["result",["box"]]]],[11,"deserialize","","",21,[[["value"]],["result",["box"]]]],[11,"deserialize","private_currency::transactions","",25,[[["value"]],["result",["box"]]]],[11,"deserialize","","",26,[[["value"]],["result",["box"]]]],[11,"deserialize","","",27,[[["value"]],["result",["box"]]]],[11,"serialize","private_currency::api","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","private_currency","",17,[[["self"],["s"]],["result"]]],[11,"serialize","private_currency::storage","",20,[[["self"],["s"]],["result"]]],[11,"serialize","","",21,[[["self"],["s"]],["result"]]],[11,"serialize","private_currency::transactions","",25,[[["self"],["s"]],["result"]]],[11,"serialize","","",26,[[["self"],["s"]],["result"]]],[11,"serialize","","",27,[[["self"],["s"]],["result"]]],[11,"serialize","","",23,[[["self"],["s"]],["result"]]],[11,"serialize","private_currency","",2,[[["self"],["__s"]],["result"]]],[11,"deserialize","private_currency::api","",4,[[["__d"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result"]]],[11,"deserialize","","",10,[[["__d"]],["result"]]],[11,"deserialize","private_currency","",17,[[["d"]],["result"]]],[11,"deserialize","private_currency::storage","",20,[[["d"]],["result"]]],[11,"deserialize","","",21,[[["d"]],["result"]]],[11,"deserialize","private_currency::transactions","",25,[[["d"]],["result"]]],[11,"deserialize","","",26,[[["d"]],["result"]]],[11,"deserialize","","",27,[[["d"]],["result"]]],[11,"deserialize","","",23,[[["d"]],["result"]]],[11,"deserialize","private_currency","",2,[[["__d"]],["result"]]],[11,"field_size","private_currency::crypto","",15,[[],["u32"]]],[11,"read","","",15,N],[11,"write","","",15,[[["self"],["vec"],["u32"],["u32"]]]],[11,"check","","",15,N],[11,"read","private_currency","",17,N],[11,"write","","",17,[[["self"],["vec"],["offset"],["offset"]]]],[11,"check","","",17,N],[11,"field_size","","",17,[[],["offset"]]],[11,"read","private_currency::storage","",20,N],[11,"write","","",20,[[["self"],["vec"],["offset"],["offset"]]]],[11,"check","","",20,N],[11,"field_size","","",20,[[],["offset"]]],[11,"read","","",21,N],[11,"write","","",21,[[["self"],["vec"],["offset"],["offset"]]]],[11,"check","","",21,N],[11,"field_size","","",21,[[],["offset"]]],[11,"from_hex","private_currency::crypto","",15,[[["t"]],["result"]]],[11,"from_hex","private_currency::transactions","",25,[[["t"]],["result"]]],[11,"from_hex","","",26,[[["t"]],["result"]]],[11,"from_hex","","",27,[[["t"]],["result"]]],[11,"item_size","private_currency::crypto","",16,[[],["u32"]]],[11,"count","","",16,[[["self"]],["u32"]]],[11,"from_buffer","","",16,N],[11,"extend_buffer","","",16,[[["self"],["vec"]]]],[11,"check_data","","",16,N],[11,"item_size","private_currency::transactions","",25,[[],["offset"]]],[11,"count","","",25,[[["self"]],["offset"]]],[11,"extend_buffer","","",25,[[["self"],["vec"]]]],[11,"from_buffer","","",25,N],[11,"check_data","","",25,N],[11,"item_size","","",26,[[],["offset"]]],[11,"count","","",26,[[["self"]],["offset"]]],[11,"extend_buffer","","",26,[[["self"],["vec"]]]],[11,"from_buffer","","",26,N],[11,"check_data","","",26,N],[11,"item_size","","",27,[[],["offset"]]],[11,"count","","",27,[[["self"]],["offset"]]],[11,"extend_buffer","","",27,[[["self"],["vec"]]]],[11,"from_buffer","","",27,N],[11,"check_data","","",27,N],[11,"hash","private_currency::crypto","",15,[[["self"]],["hash"]]],[11,"hash","private_currency","",17,[[["self"]],["hash"]]],[11,"hash","private_currency::storage","",20,[[["self"]],["hash"]]],[11,"hash","","",21,[[["self"]],["hash"]]],[11,"into_bytes","private_currency::crypto","",15,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",15,[[["cow"]],["self"]]],[11,"into_bytes","private_currency","",17,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",17,[[["cow"]],["self"]]],[11,"into_bytes","private_currency::storage","",20,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",20,[[["cow"]],["self"]]],[11,"into_bytes","","",21,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",21,[[["cow"]],["self"]]],[11,"into_bytes","private_currency::transactions","",25,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",25,[[["cow"]],["self"]]],[11,"into_bytes","","",26,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",26,[[["cow"]],["self"]]],[11,"into_bytes","","",27,[[["self"]],["vec",["u8"]]]],[11,"from_bytes","","",27,[[["cow"]],["self"]]],[11,"service_id","private_currency","",29,[[["self"]],["u16"]]],[11,"service_name","","",29,[[["self"]],["str"]]],[11,"state_hash","","",29,[[["self"],["snapshot"]],["vec",["hash"]]]],[11,"tx_from_raw","","",29,[[["self"],["rawmessage"]],["result",["box","encodingerror"]]]],[11,"before_commit","","",29,[[["self"],["fork"]]]],[11,"after_commit","","",29,[[["self"],["servicecontext"]]]],[11,"wire_api","","",29,[[["self"],["serviceapibuilder"]]]],[11,"verify","private_currency::transactions","",25,[[["self"]],["bool"]]],[11,"execute","","",25,[[["self"],["fork"]],["result",["executionerror"]]]],[11,"verify","","",26,[[["self"]],["bool"]]],[11,"execute","","",26,[[["self"],["fork"]],["result",["executionerror"]]]],[11,"verify","","",27,[[["self"]],["bool"]]],[11,"execute","","",27,[[["self"],["fork"]],["result",["executionerror"]]]],[11,"tx_from_raw","","",23,[[["rawtransaction"]],["result",["error"]]]],[11,"from_raw","","",25,[[["rawmessage"]],["result",["createwallet","error"]]]],[11,"raw","","",25,[[["self"]],["rawmessage"]]],[11,"from_raw","","",26,[[["rawmessage"]],["result",["transfer","error"]]]],[11,"raw","","",26,[[["self"]],["rawmessage"]]],[11,"from_raw","","",27,[[["rawmessage"]],["result",["accept","error"]]]],[11,"raw","","",27,[[["self"]],["rawmessage"]]],[11,"cause","private_currency::api","",8,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",8,[[["self"]],["option",["backtrace"]]]],[11,"cause","private_currency::transactions","",24,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",24,[[["self"]],["option",["backtrace"]]]],[11,"cause","private_currency::api","",6,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",6,[[["self"]],["option",["backtrace"]]]],[11,"from_slice","private_currency::crypto::enc","`from_slice()` creates an object from a byte slice",13,N],[11,"from_slice","","`from_slice()` creates an object from a byte slice",14,N]],"paths":[[3,"DebuggerOptions"],[3,"VerifiedTransfer"],[3,"Config"],[4,"DebugEvent"],[3,"WalletQuery"],[3,"CheckedWalletProof"],[4,"BlockVerifyError"],[4,"FullEvent"],[4,"VerifyError"],[4,"ProofDescription"],[3,"WalletProof"],[4,"Api"],[3,"Opening"],[3,"PublicKey"],[3,"SecretKey"],[3,"Commitment"],[3,"SimpleRangeProof"],[3,"EncryptedData"],[3,"SecretState"],[3,"WalletInfo"],[3,"Wallet"],[3,"Event"],[3,"Schema"],[4,"CryptoTransactions"],[4,"Error"],[3,"CreateWallet"],[3,"Transfer"],[3,"Accept"],[3,"TrustAnchor"],[3,"Service"],[3,"Debugger"]]};
initSearch(searchIndex);
